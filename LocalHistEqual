#include "pch.h"
#include <iostream>
#include <opencv2/opencv.hpp>
using namespace std;
using namespace cv;
void Hist(const Mat &src, int *p);
void LHE(const Mat &src, Mat &dst, int size, int *p);
int main()
{
	Mat src = imread("image.tif", IMREAD_GRAYSCALE);
	int hist[256] = { 0 };

	Mat dst = Mat::zeros(Size(src.cols, src.rows), CV_8UC1);
	LHE(src, dst, 3, hist);
	imshow("image", src);
	imshow("image1", dst);
	waitKey(0);
  return 0;
}

void Hist(const Mat & src, int *p)
{
	for (int i = 0; i < 256; i++)
	{
		p[i] = 0;
	}
	for (int i = 0; i < src.rows; i++)
	{
		for (int j = 0; j < src.cols; j++)
		{
			p[src.at<uchar>(i, j)] += 1;
		}
	}
}
void LHE(const Mat &src, Mat &dst, int size, int *p)
{
	Mat temp;
	src.copyTo(temp);
	for (int i = 0; i < src.rows-size; i++)
	{
		for (int j = 0; j < src.cols-size; j++)
		{
			Mat kernel = src(Rect(j, i, size, size));
			Hist(kernel, p);
			int sum = 0;
			if (src.at<uchar>(i + size / 2 + 1, j + size / 2 + 1) == 0)
			{
				dst.at<uchar>(i + size / 2 + 1, j + size / 2 + 1) = 0;
			}
			else
			{
				for (int k = 0; k <= src.at<uchar>(i + size / 2 + 1, j + size / 2 + 1); k++)
				{
					sum = sum + p[k];
				}
				dst.at<uchar>(i + size / 2 + 1, j + size / 2 + 1) = 255 * sum / (size*size);
				if (i == 160 && j == 160)
				{
					cout << ' ';
				}

			}
		}
	}
	

}
